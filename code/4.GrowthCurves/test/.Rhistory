select(Time, starts_with("M13_"))
M13.R.fits <-growth.modGomp(input = M13.R, output.name = "M13_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M13.R.fits.out <- read.table("../output/M13_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M17.R <- dat4 %>%
select(Time, starts_with("M17_"))
M17.R.fits <-growth.modGomp(input = M17.R, output.name = "M17_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M17.R.fits.out <- read.table("../output/M17_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M21.R <- dat4 %>%
select(Time, starts_with("M21_"))
M21.R.fits <-growth.modGomp(input = M21.R, output.name = "M21_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M21.R.fits.out <- read.table("../output/M21_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M23.R <- dat4 %>%
select(Time, starts_with("M23_"))
M23.R.fits <-growth.modGomp(input = M23.R, output.name = "M23_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M23.R.fits.out <- read.table("../output/M23_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M54.R <- dat4 %>%
select(Time, starts_with("M54_"))
M54.R.fits <-growth.modGomp(input = M54.R, output.name = "M54_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M54.R.fits.out <- read.table("../output/M54_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S1.R <- dat4 %>%
select(Time, starts_with("S1_"))
S1.R.fits <-growth.modGomp(input = S1.R, output.name = "S1_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
S1.R.fits.out <- read.table("../output/S1_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S11.R <- dat4 %>%
select(Time, starts_with("S11_"))
S11.R.fits <-growth.modGomp(input = S11.R, output.name = "S11_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
S11.R.fits.out <- read.table("../output/S11_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S22.R <- dat4 %>%
select(Time, starts_with("S22_"))
S22.R.fits <-growth.modGomp(input = S22.R, output.name = "S22_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
S22.R.fits.out <- read.table("../output/S22_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S51.R <- dat4 %>%
select(Time, starts_with("S51_"))
S51.R.fits <-growth.modGomp(input = S51.R, output.name = "S51_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
S51.R.fits.out <- read.table("../output/S51_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S95.R <- dat4 %>%
select(Time, starts_with("S95_"))
S95.R.fits <-growth.modGomp(input = S95.R, output.name = "S95_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
S95.R.fits.out <- read.table("../output/S95_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M4.R <- dat5 %>%
select(Time, starts_with("M4_"))
M4.R.fits <-growth.modGomp(input = M4.R, output.name = "M4_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M4.R.fits.out <- read.table("../output/M4_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M19.R <- dat5 %>%
select(Time, starts_with("M19_"))
M19.R.fits <-growth.modGomp(input = M19.R, output.name = "M19_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M19.R.fits.out <- read.table("../output/M19_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M23.R2 <- dat5 %>%
select(Time, starts_with("M23_"))
M23.R2.fits <-growth.modGomp(input = M23.R2, output.name = "M23_repeat2.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M23.R2 <- dat5 %>%
select(Time, starts_with("M23_"))
M23.R2.fits <-growth.modGomp(input = M23.R2, output.name = "M23_repeat2.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M23.R2.fits.out <- read.table("../output/M23_repeat2.new.fit.parms.txt", sep = ",", header = TRUE)
M26.R <- dat5 %>%
select(Time, starts_with("M26_"))
M26.R.fits <-growth.modGomp(input = M26.R, output.name = "M26_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M26.R.fits.out <- read.table("../output/M26_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M41.R <- dat5 %>%
select(Time, starts_with("M41_"))
M41.R.fits <-growth.modGomp(input = M41.R, output.name = "M41_repeat.new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M41.R.fits.out <- read.table("../output/M41_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
```
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
rm(list=ls())
#setwd("~/Github/SporeMut/code/4.GrowthCurves/test")
setwd("~/Github/SporMut/code/4.GrowthCurves/test")
require("png")
require("dplyr")
require("grid")
require("gtools")
require("nlme")
require("MuMIn")
require("bbmle")
#source("~/Github/SporeMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
source("~/Github/SporMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) 100*( sd(x)/mean(x))
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
# Load data and change time to numeric
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/batch_combo.csv")
# dat <- cbind(dat1,dat2)
# anc <-read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/ancestor.csv")
# anc$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", anc$Time))
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230802_GrowthCurve_SporeMut.csv")
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat  <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurves_SporeMut.csv")
dat2 <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230822_SporeMut_GrowthCurves_R2B.csv")
dat3 <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230823_SporeMut_GrowthCurves_R2B.csv")
dat4 <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230824_SporeMut_GrowthCurves_R2B.csv")
dat5 <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230826_SporeMut_GrowthCurves_R2B.csv")
dat$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat$Time))
# filter so length of data is equal across strains
#dat <- dat.raw %>%
# filter(row_number() <= 93)
dat2$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat2$Time))
dat3$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat3$Time))
dat4$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat4$Time))
dat5$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat5$Time))
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("ancestor"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M4.fits.out <- read.table("../output/M4_new.fit.parms.txt", sep = ",", header = TRUE)
S1.fits.out <- read.table("../output/S1_new.fit.parms.txt", sep = ",", header = TRUE)
M23.fits.out <- read.table("../output/M23_new.fit.parms.txt", sep = ",", header = TRUE)
M13.fits.out <- read.table("../output/M13_new.fit.parms.txt", sep = ",", header = TRUE)
M17.fits.out <- read.table("../output/M17_new.fit.parms.txt", sep = ",", header = TRUE)
M19.fits.out <- read.table("../output/M19_new.fit.parms.txt", sep = ",", header = TRUE)
M21.fits.out <- read.table("../output/M21_new.fit.parms.txt", sep = ",", header = TRUE)
M26.fits.out <- read.table("../output/M26_new.fit.parms.txt", sep = ",", header = TRUE)
M41.fits.out <- read.table("../output/M41_new.fit.parms.txt", sep = ",", header = TRUE)
M54.fits.out <- read.table("../output/M54_new.fit.parms.txt", sep = ",", header = TRUE)
M79.fits.out <- read.table("../output/M79_new.fit.parms.txt", sep = ",", header = TRUE)
S6.fits.out <- read.table("../output/S6_new.fit.parms.txt", sep = ",", header = TRUE)
S11.fits.out <- read.table("../output/S11_new.fit.parms.txt", sep = ",", header = TRUE)
S22.fits.out <- read.table("../output/S22_new.fit.parms.txt", sep = ",", header = TRUE)
S51.fits.out <- read.table("../output/S51_new.fit.parms.txt", sep = ",", header = TRUE)
S95.fits.out <- read.table("../output/S95_new.fit.parms.txt", sep = ",", header = TRUE)
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("ancestor"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M13.R.fits.out <- read.table("../output/M13_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M17.R.fits.out <- read.table("../output/M17_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M21.R.fits.out <- read.table("../output/M21_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M23.R.fits.out <- read.table("../output/M23_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M54.R.fits.out <- read.table("../output/M54_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S1.R.fits.out <- read.table("../output/S1_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S11.R.fits.out <- read.table("../output/S11_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S22.R.fits.out <- read.table("../output/S22_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S51.R.fits.out <- read.table("../output/S51_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
S95.R.fits.out <- read.table("../output/S95_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M4.R.fits.out <- read.table("../output/M4_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M19.R.fits.out <- read.table("../output/M19_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M23.R2.fits.out <- read.table("../output/M23_repeat2.new.fit.parms.txt", sep = ",", header = TRUE)
M26.R.fits.out <- read.table("../output/M26_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
M41.R.fits.out <- read.table("../output/M41_repeat.new.fit.parms.txt", sep = ",", header = TRUE)
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
M13_all <- rbind.data.frame(M13.fits.out[-c(1,6),], M13.R.fits.out)
M17_all <- rbind.data.frame(M17.fits.out[-1,], M17.R.fits.out[-c(2,5,6),])
M19_all <- rbind.data.frame(M19.fits.out, M19.R.fits.out[-c(2,10),])
M21_all <- rbind.data.frame(M21.fits.out[-c(2,6),], M21.R.fits.out)
M23_all <- rbind.data.frame(M23.R.fits.out, M23.R2.fits.out)
M26_all <- rbind.data.frame(M26.fits.out, M26.R.fits.out[-1,])
#M41.fits.out
M54_all <- rbind.data.frame(M54.fits.out[-3,], M54.R.fits.out[-c(2,4),])
#M79.fits.out
S1_all  <- rbind.data.frame(S1.fits.out[-5,], S1.R.fits.out)
#S6.fits.out
S11_all <- rbind.data.frame(S11.fits.out, S11.R.fits.out)
S22_all <- rbind.data.frame(S22.fits.out[-c(3,4),], S22.R.fits.out)
S51_all <- rbind.data.frame(S51.fits.out, S51.R.fits.out)
S95_all <- rbind.data.frame(S95.fits.out, S95.R.fits.out)
#choose rhe first 6 lowest RSME
dflist <- list(anc.fits.out, M4_all, M13_all, M17_all, M19_all, M21_all,
M23_all, M26_all, M41.fits.out, M54_all,
M79.fits.out, S1_all,S6.fits.out, S11_all,
S22_all, S51_all, S95_all)
anc.fits.out <- read.table("../output/anc_new.fit.parms.txt", sep = ",", header = TRUE)
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
M13_all <- rbind.data.frame(M13.fits.out[-c(1,6),], M13.R.fits.out)
M17_all <- rbind.data.frame(M17.fits.out[-1,], M17.R.fits.out[-c(2,5,6),])
M19_all <- rbind.data.frame(M19.fits.out, M19.R.fits.out[-c(2,10),])
M21_all <- rbind.data.frame(M21.fits.out[-c(2,6),], M21.R.fits.out)
M23_all <- rbind.data.frame(M23.R.fits.out, M23.R2.fits.out)
M26_all <- rbind.data.frame(M26.fits.out, M26.R.fits.out[-1,])
#M41.fits.out
M54_all <- rbind.data.frame(M54.fits.out[-3,], M54.R.fits.out[-c(2,4),])
#M79.fits.out
S1_all  <- rbind.data.frame(S1.fits.out[-5,], S1.R.fits.out)
#S6.fits.out
S11_all <- rbind.data.frame(S11.fits.out, S11.R.fits.out)
S22_all <- rbind.data.frame(S22.fits.out[-c(3,4),], S22.R.fits.out)
S51_all <- rbind.data.frame(S51.fits.out, S51.R.fits.out)
S95_all <- rbind.data.frame(S95.fits.out, S95.R.fits.out)
#choose rhe first 6 lowest RSME
dflist <- list(anc.fits.out, M4_all, M13_all, M17_all, M19_all, M21_all,
M23_all, M26_all, M41.fits.out, M54_all,
M79.fits.out, S1_all,S6.fits.out, S11_all,
S22_all, S51_all, S95_all)
bestCurve <- function(x){
x[x$RSME %in% sort(x$RSME, partial = 1:6)[1:6], ]
}
dflist_best <- lapply(dflist, bestCurve)
dflist
anc.fits.out
anc <- dat %>%
select(Time, starts_with("ancestor"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
anc.fits.out <- read.table("../output/anc_new.fit.parms.txt", sep = ",", header = TRUE)
# Subset the best 6 curves of each clone
# Removing non fitting models and and selecting 6 of them
# where RMSE smaller.
# anc.fits.out
M4_all  <- rbind.data.frame(M4.fits.out, M4.R.fits.out)
M13_all <- rbind.data.frame(M13.fits.out[-c(1,6),], M13.R.fits.out)
M17_all <- rbind.data.frame(M17.fits.out[-1,], M17.R.fits.out[-c(2,5,6),])
M19_all <- rbind.data.frame(M19.fits.out, M19.R.fits.out[-c(2,10),])
M21_all <- rbind.data.frame(M21.fits.out[-c(2,6),], M21.R.fits.out)
M23_all <- rbind.data.frame(M23.R.fits.out, M23.R2.fits.out)
M26_all <- rbind.data.frame(M26.fits.out, M26.R.fits.out[-1,])
#M41.fits.out
M54_all <- rbind.data.frame(M54.fits.out[-3,], M54.R.fits.out[-c(2,4),])
#M79.fits.out
S1_all  <- rbind.data.frame(S1.fits.out[-5,], S1.R.fits.out)
#S6.fits.out
S11_all <- rbind.data.frame(S11.fits.out, S11.R.fits.out)
S22_all <- rbind.data.frame(S22.fits.out[-c(3,4),], S22.R.fits.out)
S51_all <- rbind.data.frame(S51.fits.out, S51.R.fits.out)
S95_all <- rbind.data.frame(S95.fits.out, S95.R.fits.out)
#choose rhe first 6 lowest RSME
dflist <- list(anc.fits.out, M4_all, M13_all, M17_all, M19_all, M21_all,
M23_all, M26_all, M41.fits.out, M54_all,
M79.fits.out, S1_all,S6.fits.out, S11_all,
S22_all, S51_all, S95_all)
bestCurve <- function(x){
x[x$RSME %in% sort(x$RSME, partial = 1:6)[1:6], ]
}
dflist_best <- lapply(dflist, bestCurve)
# M13.reps <- M13_all$umax[abs(M13_all$umax-median(M13_all$umax)) %in% sort(abs(M13_all$umax-median(M13_all$umax)), partial=1:6)[1:6]]
# M13.all.out <- M13_all[M13_all$umax %in% M13.reps, ]
all.fits <- bind_rows(dflist_best, .id = "column_label")
all.fits$clones <- gsub("_.*","",all.fits$Curve)
all.fits$clones[1:6] <- rep("ancestor", time = 6)
# Combine fits with strain and treatment information (e.g, cell type, mutations, etc.)
treats <- read.csv("../data/treatments.csv")
treats_cut <- treats[-c(7:12),]
parms <- data.frame(treats_cut, all.fits) # this doesn't work, probably because some of the fits didn't converge?
#It is because some clones have different amount of reps
#head(parms)
# column
library(ggplot2)
treats_param <-  parms %>%
mutate(treatment = case_when(
strain %in%  "A" ~ "ancestor",
strain %in%  c("M23","M26")  ~ "evolved_spore",
strain %in% c("M17", "M19", "M21", "M41", "M54") ~ "sinR",
strain %in%  c("M4", "M13", "M79") ~ "ywcC",
strain %in%  c("S1","S6", "S11", "S22", "S51", "S95") ~ "spore"))
#%>%filter(!treatment == "spore")
sum_treats_param <-  treats_param %>%
group_by(strain, treatment) %>%
summarize(mean_A = mean(A), mean_umax = mean(umax),
mean_L = mean(L), sem_A = sem(A), sem_umax = sem(umax),
sem_L = sem(L), LL.95_A = LL.95(A), LL.95_umax = LL.95(umax),
LL.95_L = LL.95(L), UL.95_A = UL.95(A), UL.95_umax = UL.95(umax),
UL.95_L = UL.95(L))
level_order <- c("A", "M17", "M19", "M21", "M41", "M54", "M4", "M13", "M19", "M23", "M26", "S1","S6", "S11", "S22", "S51", "S95")
ggplot(sum_treats_param, aes(x = strain, y = mean_umax, color = treatment))+
geom_point(shape = 1, size = 4)+
geom_errorbar(data = sum_treats_param, aes (ymin = (mean_umax - sem_umax), ymax = (mean_umax + sem_umax)), width = .2)+
geom_point(data = treats_param, aes(x = strain, y = umax, color = treatment), alpha = .3, size = 4)+
ylab("Maximum growth rate")+
scale_x_discrete(limits = level_order)+
theme_bw()+
theme(legend.position = 'bottom')+
scale_color_manual(values = c("grey","black", "darkred", "darkblue", "darkgreen"))+
theme(axis.ticks.length=unit(.25, "cm"))+
theme(legend.title = element_blank(), legend.text = element_text(size=12))+
theme(axis.text = element_text(size = 14),
axis.title.x = element_blank(), axis.title.y = element_text(size =14))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Ancestor
#anc <- parms %>% filter(evo.type == "anc") # before measuring ancestor on 11 June 23
anc <- anc.parms %>% filter(evo.type == "anc")
png(filename="~/GitHub/SporeMut/output/4.GrowthCurves/growth.umaxNEW.png",
width = 1200, height = 800, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75", lwd = 2,
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
box(lwd = 2)
anc
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
box(lwd = 2)
# Create plot
png(filename="~/GitHub/SporeMut/output/4.GrowthCurves/growth.umaxNEW.png",
width = 1200, height = 800, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
# Create plot
png(filename="~/GitHub/SporeMut/output/4.GrowthCurves/growth.umaxNEW.png",
width = 1200, height = 800, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
dev.off
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
box(lwd = 2)
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
m23
# Total mutants: sinR
points(jitter(rep(6, length(m17$umax)), amount = 0.1), m17$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
# Ancestor
#anc <- parms %>% filter(evo.type == "anc") # before measuring ancestor on 11 June 23
anc <- anc.parms %>% filter(evo.type == "anc")
parms
# Ancestor
#anc <- parms %>% filter(evo.type == "anc") # before measuring ancestor on 11 June 23
anc <- anc.parms %>% filter(evo.type == "anc")
anc <- params[params$clones %in% 'ancestor',]
anc <- params[parms$clones %in% 'ancestor',]
anc <- parms[parms$clones %in% 'ancestor',]
M4  <- parms[parms$clones %in% 'M4',]
M14 <- parms[parms$clones %in% 'M14',]
anc <- parms[parms$clones %in% 'ancestor',]
M4  <- parms[parms$clones %in% 'M4',]
M13 <- parms[parms$clones %in% 'M14',]
M14 <- parms[parms$clones %in% 'M14',]
M17 <- parms[parms$clones %in% 'M17',]
M21 <- parms[parms$clones %in% 'M21',]
M23 <- parms[parms$clones %in% 'M23',]
M26 <- parms[parms$clones %in% 'M26',]
M41 <- parms[parms$clones %in% 'M41',]
M54 <- parms[parms$clones %in% 'M54',]
M79 <- parms[parms$clones %in% 'M79',]
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
box(lwd = 2)
#lwd = 2 This doesn't work on my computer -CK
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
anc <- parms[parms$clones %in% 'ancestor',]
m4  <- parms[parms$clones %in% 'M4',]
m13 <- parms[parms$clones %in% 'M14',]
m14 <- parms[parms$clones %in% 'M14',]
m17 <- parms[parms$clones %in% 'M17',]
m21 <- parms[parms$clones %in% 'M21',]
m23 <- parms[parms$clones %in% 'M23',]
m26 <- parms[parms$clones %in% 'M26',]
m41 <- parms[parms$clones %in% 'M41',]
m54 <- parms[parms$clones %in% 'M54',]
m79 <- parms[parms$clones %in% 'M79',]
png(filename="~/GitHub/SporeMut/output/4.GrowthCurves/growth.umaxNEW.png",
width = 1200, height = 800, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
#lwd = 2 This doesn't work on my computer -CK
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
anc$umax
dev.off()
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "")
box(lwd = 2)
#lwd = 2 This doesn't work on my computer -CK
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "", lwd = 2)
box(lwd = 2)
#lwd = 2 This doesn't work on my computer -CK
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
quartz()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
quartz()
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "", lwd = 2)
box(lwd = 2)
dev.off
png(filename="~/GitHub/SporeMut/output/4.GrowthCurves/growth.umaxNEW.png",
width = 1200, height = 800, res = 96*2)
plot.new()
dev.off()
quartz()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "", lwd = 2)
box(lwd = 2)
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
anc.pt <- plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "", lwd = 2)
box(lwd = 2)
plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "", lwd = 2)
box(lwd = 2)
# Spore mutants
points(jitter(rep(3, length(m23$umax)), amount = 0.1), m23$umax, pch = 21,
bg = "grey75", col = "grey75", lwd = 2, cex = 1.7)
png(filename="~/GitHub/SporeMut/output/4.GrowthCurves/growth.umaxNEW.png",
width = 1200, height = 800, res = 96*2)
plot.new()
par(mar = c(7, 7, 5, 7), plt = c(0.2, 0.85, 0.45, 0.85))
# Add individuals points
plot(jitter(rep(1, length(anc$umax)), amount = 0.1), anc$umax,
ylim = c(0.02, 0.1), xlim = c(0.5, 15), pch = 21, col = "grey75",
bg = "grey75",
cex = 1.7, yaxt = "n", xaxt = "n", cex.lab = 2, cex.axis = 1.5,
las = 1, ylab = "", xlab = "", lwd = 2)
box(lwd = 2)
dev.off()
