"C", "C", "C", "C", "C", "D", "D", "D", "D", "D"), 3)
dim(parm.fit.reps)
length(parm.fit.reps)
parm.fit.s.A
parm.cell <- c(rep("s", 20), rep("v", 20), rep("t", 20))
parm.cell
parms <- cbind(parm.cell, parm.fit.reps, parm.names, parm.fits)
parm.fits <- rbind(parm.fit.s.A, parm.fit.s.B, parm.fit.s.C, parm.fit.s.D,
parm.fit.v.A, parm.fit.v.B, parm.fit.v.C, parm.fit.v.D,
parm.fit.t.A, parm.fit.t.B, parm.fit.t.C, parm.fit.t.D)
parms <- cbind(parm.cell, parm.fit.reps, parm.names, parm.fits)
head(parms)
parms <- as.data.frame(cbind(parm.cell, parm.fit.reps, parm.names, parm.fits))
parms
rownames(parms) <- 1:nrow(parms)
parms
colnames(parms) <- c("cell", "rep", "parm", "est", "sem")
parms
format(c(parms$est, parms$sem), digits = 3)
parm.fit.s.A <- summary(fit.s.A)@coef[1:5,1:2]
parm.fit.s.B <- summary(fit.s.B)@coef[1:5,1:2]
parm.fit.s.C <- summary(fit.s.C)@coef[1:5,1:2]
parm.fit.s.D <- summary(fit.s.D)@coef[1:5,1:2]
parm.fit.v.A <- summary(fit.v.A)@coef[1:5,1:2]
parm.fit.v.B <- summary(fit.v.B)@coef[1:5,1:2]
parm.fit.v.C <- summary(fit.v.C)@coef[1:5,1:2]
parm.fit.v.D <- summary(fit.v.D)@coef[1:5,1:2]
parm.fit.t.A <- summary(fit.t.A)@coef[1:5,1:2]
parm.fit.t.B <- summary(fit.t.B)@coef[1:5,1:2]
parm.fit.t.C <- summary(fit.t.C)@coef[1:5,1:2]
parm.fit.t.D <- summary(fit.t.D)@coef[1:5,1:2]
parm.fit.reps <- c("A", "B", "C", "D", "A", "B", "C", "D", "A", "B", "C", "D", "A", "B", "C", "D" )
parm.fit.cell <- c("s", "s", "s", "s", "v", "v", "v", "v", "t", "t", "t", "t")
parm.fits <- rbind(parm.fit.s.A, parm.fit.s.B, parm.fit.s.C, parm.fit.s.D,
parm.fit.v.A, parm.fit.v.B, parm.fit.v.C, parm.fit.v.D,
parm.fit.t.A, parm.fit.t.B, parm.fit.t.C, parm.fit.t.D)
parm.names <- rep(c("a","b","m","w","z"), 12)
parm.fit.reps <- rep(c("A", "A", "A", "A", "A", "B", "B", "B", "B", "B",
"C", "C", "C", "C", "C", "D", "D", "D", "D", "D"), 3)
parm.cell <- c(rep("s", 20), rep("v", 20), rep("t", 20))
parms <- as.data.frame(cbind(parm.cell, parm.fit.reps, parm.names, parm.fits))
rownames(parms) <- 1:nrow(parms)
colnames(parms) <- c("cell", "rep", "parm", "est", "sem")
parms$est <- round(parms$est, 3)
parms$est <- round(parms$est, 3)
parm.fit.reps <- c("A", "B", "C", "D", "A", "B", "C", "D", "A", "B", "C", "D", "A", "B", "C", "D" )
parm.fit.cell <- c("s", "s", "s", "s", "v", "v", "v", "v", "t", "t", "t", "t")
parm.fits <- rbind(parm.fit.s.A, parm.fit.s.B, parm.fit.s.C, parm.fit.s.D,
parm.fit.v.A, parm.fit.v.B, parm.fit.v.C, parm.fit.v.D,
parm.fit.t.A, parm.fit.t.B, parm.fit.t.C, parm.fit.t.D)
parm.names <- rep(c("a","b","m","w","z"), 12)
parm.fit.reps <- rep(c("A", "A", "A", "A", "A", "B", "B", "B", "B", "B",
"C", "C", "C", "C", "C", "D", "D", "D", "D", "D"), 3)
parm.cell <- c(rep("s", 20), rep("v", 20), rep("t", 20))
parms <- as.data.frame(cbind(parm.cell, parm.fit.reps, parm.names, parm.fits))
rownames(parms) <- 1:nrow(parms)
colnames(parms) <- c("cell", "rep", "parm", "est", "sem")
parms
str(parms)
parms$est <- as.numeric(parms$est)
parms$sem <- as.numeric(parms$sem)
parms$est <- round(parms$est, 3)
parms$sem <- round(parms$sem, 4)
head(parms)
write.table(parms, "output/1.PopDynamics/sigmoidal.parms.txt", sep = "\t", col.names = T, row.names = F)
data.all.A
A.t0 <- data.all.A %>%
filter(time = "0.000")
A.t0 <- data.all.A %>%
filter(time == "0.000")
A.t0
A.t0 <- data.all.A %>%
filter(time == 0.000)
A.t0
A.t0 <- data.all.A$total %>%
filter(time == 0.000)
A.t0 <- data.all.A %>%
filter(time == 0.000)
result <- data.all.A %>%
filter(time == 0.0000) %>%
summarise(tot.ab = total)
result
fit.t.A
summary(fit.s.A)@coef[3]
summary(fit.s.A)@coef
summary(fit.t.A)@coef
summary(fit.t.A)@coef[3]
summary(fit.t.A)@coef[3]
10^summary(fit.t.A)@coef[3]
round(10^summary(fit.t.A)@coef[3])
result <- data.all.A %>%
filter(time == round(10^summary(fit.t.A)@coef[3]) %>%
summarise(tot.ab = total)
)
data.all.A
result <- data.all.A %>%
filter(time == c(0.0000, 10.000) %>%
summarise(tot.ab = total)
result <- data.all.A %>%
filter(time == c(0.0000, 10.000)) %>%
summarise(tot.ab = total)
result <- data.all.A %>%
filter(time == 0.0000 & time == 10.000) %>%
summarise(tot.ab = total)
result
result <- data.all.A %>%
filter(time == 0.0000 & time == 10.000) %>%
summarise(tot.ab = total)
result
result <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total)
result
crash.A
crash.A <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total)
crash.A
crash.A[1]
crash.A[1]
crash.A[1,1]
crash.A[1,2]
crash.A[2,1]
crash.A <- crash.A[1,1]/crash.A[2,1]
crash.A
crash.A.per <- (crash.A[1,1] - crash.A[2,1]) / crash.A[1,1]
crash.A[1,1] - crash.A[2,1]
crash.A[1,1]
crash.A <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total)
crash.A.fold <- crash.A[1,1]/crash.A[2,1] # 234-fold decline
crash.A.fold
crash.A.per <- (crash.A[1,1] - crash.A[2,1]) / crash.A[1,1]
crash.A.per
crash.B <- data.all.B %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total)
crash.B.fold <- crash.B[1,1]/crash.B[2,1] # 234-fold decline
crash.B.fold
crash.B.per
crash.B.per <- (crash.B[1,1] - crash.B[2,1]) / crash.B[1,1] # 0.9957273 % decline
crash.B.per
crash.C <- data.all.C %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total)
crash.C.fold <- crash.C[1,1]/crash.C[2,1] # 294-fold decline
crash.C.per <- (crash.C[1,1] - crash.C[2,1]) / crash.C[1,1] # 0.9966071 % decline
crash.C.fold
crash.C.per
crash.D <- data.all.D %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total)
crash.D.fold <- crash.C[1,1]/crash.D[2,1] # 410.96-fold decline
crash.D.per <- (crash.D[1,1] - crash.D[2,1]) / crash.D[1,1] # 0.9975667 % decline
crash.D.fold
crash.D.per <- (crash.D[1,1] - crash.D[2,1]) / crash.D[1,1] # 0.9975667 % decline
crash.D.per
mean.crash <- mean(crash.A.per, crash.B.per, crash.C.per, crash.D.per)
mean.crash
sem.crash <- sem(crash.A.per, crash.B.per, crash.C.per, crash.D.per)
sem.crash
sem <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
sem.crash <- sem(crash.A.per, crash.B.per, crash.C.per, crash.D.per)
sem.crash
sem(crash.A.per, crash.B.per, crash.C.per, crash.D.per)
sem(1,3,4,4)
View(sem)
function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
sem.crash <- sem(c(crash.A.per, crash.B.per, crash.C.per, crash.D.per))
sem.crash
spor.eff.A <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(tot.ab = total, spor.ab = spore)
spore.eff.A
spor.eff.A
spor.eff.A <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.A
spore.eff.A <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.A
spore.eff.A <- data.all.A %>%
filter(time == 0.0000 | time = 1.0000 | time == 10.000) %>%
spore.eff.A <- data.all.A %>%
filter(time == 0.0000  time == 10.000) %>%
spore.eff.A <- data.all.A %>%
filter(time == 0.0000 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.A
spore.eff.A <- data.all.A %>%
filter(time == 0.0000 | time == 1.0 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.A
spore.eff.B <- data.all.B %>%
filter(time == 0.0000 | time == 1.0 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.B
spore.eff.C <- data.all.C %>%
filter(time == 0.0000 | time == 1.0 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.C
spore.eff.D <- data.all.D %>%
filter(time == 0.0000 | time == 1.0 | time == 10.000) %>%
summarise(spore.e = spore/total)
spore.eff.D
spore.eff.D[2]
spore.eff.D[1,2]
spore.eff.D[2,1]
spore.eff.D[3,1]
mean.spore.eff.1d <- mean(spore.eff.A[2,1], spore.eff.B[2,1], spore.eff.C[2,1], spore.eff.D[2,1])
mean.spore.eff.1d
sem.spore.eff.1d <- sem(c(spore.eff.A[2,1], spore.eff.B[2,1], spore.eff.C[2,1], spore.eff.D[2,1]))
sem.spore.eff.1d
mean.spore.eff.1d <- mean(spore.eff.A[2,1], spore.eff.B[2,1], spore.eff.C[2,1], spore.eff.D[2,1]) *100
sem.spore.eff.1d <- sem(c(spore.eff.A[2,1], spore.eff.B[2,1], spore.eff.C[2,1], spore.eff.D[2,1])) *100
mean.spore.eff.1d
sem.spore.eff.1d
mean.spore.eff.10d <- mean(spore.eff.A[3,1], spore.eff.B[3,1], spore.eff.C[3,1], spore.eff.D[3,1]) *100
sem.spore.eff.10d <- sem(c(spore.eff.A[3,1], spore.eff.B[3,1], spore.eff.C[3,1], spore.eff.D[3,1])) *100
mean.spore.eff.10d
sem.spore.eff.10d
png(filename="/Users/lennonj/GitHub/SporeMut/output/1.PopDynamics/1.PopDynamics_Log_2panel.png",
width = 1000, height = 1200, res = 96*2)
# Make plot
#par(mfrow=c(2,1), mar = c(5, 7, 5, 7))
par(mar=c(0.5, 0.5, 1.5, 0.2), mfrow=c(2,1),
oma = c(5, 7, 1, 7), xpd = NA)
#par(mfrow=c(2,1))
#par(mar = c(5, 7, 5, 7))
# plot total abundance
plot(log10(data.all$time), log10(data.all$total), pch = 21,
bg = "grey80", cex = 1.25, col = "grey80", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-0.75, 3.5), ylim = c(4, 9), yaxt = "n", xaxt = "n")
box(lwd = 2)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^4, 10^5, 10^6, 10^7, 10^8, 10^9),
at = c(4, 5, 6, 7, 8, 9))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25,
at=c(4, 5, 6, 7, 8, 9), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25,
at = c(0, 1, 2, 3), labels = F)
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25,
at = c(0, 1, 2, 3), labels = F)
#legend(1.8, 8, c("Total"), pch = 21, pt.bg = c("grey80"),
#       col = c("grey80"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
#       y.intersp = 0.80, lwd = 0, x.intersp = -0.5)
rect(3.3, 5.6, 4, 6.8, col = "white", border = NA)
text(3.2, 6.1, labels = "Total (S + V)", cex = 0.8, adj = 0)
# Fit total abundance with sigmoidal function using MLE
# Initial parameters
A = 5.5 # Minimum (log10)
B = 8.5 # Maximum (log10)
M = 0.7 # Midpoint (log10)
W = 0.16 # Slope
Z = 0.2 # Error
# Function
fit.t <- mle2(log10(total) ~ dnorm(mean = b + (a - b) /
(1 + exp((m - log10(time)) / w)), sd = z),
start = list(a = A, b = B, m = M, w = W, z = Z), data = data.all)
curve(coef(fit.t)[[2]] + (coef(fit.t)[[1]] - coef(fit.t)[[2]]) /
(1 + exp((coef(fit.t)[[3]] - x) / coef(fit.t)[[4]])),
from = -0.24, to = 3.05, add = TRUE, lty = 2, lwd = 2.5, col = "black")
# plot vegetative and spore abundance
#par(xpd = NA)
plot(log10(data.all$time), log10(data.all$veg), pch = 21,
bg = "grey60", cex = 1.25, col = "grey60", lwd = 0.75, cex.axis = 1.25,
xlab = NA, ylab = NA, xlim = c(-0.75, 3.5), ylim = c(4, 9), yaxt = "n", xaxt = "n", xpd = FALSE)
box(lwd = 2)
points(log10(data.all$time), log10(data.all$spore), pch = 21, lwd = 0.75, col = "grey40",
bg = "grey40", cex = 1.25)
#legend(1.8, 8, c("Spore", "Vegetative"), pch = 21, pt.bg = c("grey40", "grey60"),
#       col = c("grey40", "grey60"), pt.cex = 1.25, pt.lwd = 0.75, bty = 'n',
#       y.intersp = 0.95, lwd = 0, x.intersp = -0.5)
# Add axes
axis(side = 2, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(10^4, 10^5, 10^6, 10^7, 10^8, 10^9),
at = c(4, 5, 6, 7, 8, 9))
axis(side = 4, lwd.ticks = 2, cex.axis = 1.25,
at=c(4, 5, 6, 7, 8, 9), labels = F)
axis(side = 1, lwd.ticks = 2, cex.axis = 1.25, las = 1,
labels = expression(1, 10, 100, 1000),
at = c(0, 1, 2, 3))
axis(side = 3, lwd.ticks = 2, cex.axis = 1.25,
at = c(0, 1, 2, 3), labels = F)
rect(3.4, 5, 4, 6.8, col = "white", border = NA)
text(3.2, 5.45, labels = "Vegetative (V)", cex = 0.8, adj = 0)
text(3.2, 6.0, labels = "Spore (S)", cex = 0.8, adj = 0)
mtext('Time (d)', side = 1, outer = TRUE, cex = 1.75,
line = 3, adj = 0.5)
mtext(expression('Bacteria (CFU ml'^-1*')'), side = 2, outer = TRUE, cex = 1.75,
line = 3.5, adj = 0.5)
# Fit vegetative abundance with sigmoidal function using MLE
# Initial parameters
A = 5.5 # Minimum (log10)
B = 7.9 # Maximum (log10)
M = 0.7 # Midpoint (log10)
W = 0.16 # Slope
Z = 0.2 # Error
# Function
fit.v <- mle2(log10(veg) ~ dnorm(mean = b + (a - b) / (1 + exp((m - log10(time)) / w)), sd = z),
start = list(a = A, b = B, m = M, w = W, z = Z), data = data.all)
#curve(coef(fit2)[[2]] + (coef(fit2)[[1]] - coef(fit2)[[2]]) /
#        (1 + exp((coef(fit2)[[3]] - x) / coef(fit2)[[4]])),
#      from = -6, to = 900, add = TRUE, lty = 2, lwd = 2.5, col = "black")
curve(coef(fit.v)[[2]] + (coef(fit.v)[[1]] - coef(fit.v)[[2]]) /
(1 + exp((coef(fit.v)[[3]] - x) / coef(fit.v)[[4]])),
from = -0.24, to = 3.05, add = TRUE, lty = 2, lwd = 2.5, col = "black")
# Fit spore abundance with sigmoidal function using MLE
# Initial parameters
A = 6 # Minimum (log10)
B = 6 # Maximum (log10)
M = 0.7 # Midpoint (log10)
W = 0.16 # Slope
Z = 0.2 # Error
# Function
fit.s <- mle2(log10(spore) ~ dnorm(mean = b + (a - b) / (1 + exp((m - log10(time)) / w)), sd = z),
start = list(a = A, b = B, m = M, w = W, z = Z), data = data.all)
curve(coef(fit.s)[[2]] + (coef(fit.s)[[1]] - coef(fit.s)[[2]]) /
(1 + exp((coef(fit.s)[[3]] - x) / coef(fit.s)[[4]])),
from = -0.24, to = 3.05, add = TRUE, lty = 2, lwd = 2.5, col = "black")
# Close Plot Device
dev.off()
graphics.off()
# Show Plot
img <- readPNG("/Users/lennonj/GitHub/SporeMut/output/1.PopDynamics/1.PopDynamics_Log_2panel.png")
grid.raster(img)
rm(list=ls())
setwd("~/Github/SporeMut/code/4.GrowthCurves/test")
rm(list=ls())
#setwd("~/Github/SporeMut/code/4.GrowthCurves/test")
setwd("~/Github/SporMut/code/4.GrowthCurves/test")
require("png")
require("dplyr")
require("grid")
require("gtools")
require("nlme")
require("MuMIn")
require("bbmle")
source("~/Github/SporeMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
require("png")
require("dplyr")
require("grid")
require("gtools")
require("nlme")
require("MuMIn")
require("bbmle")
#source("~/Github/SporeMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
source("~/Github/SporMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) 100*( sd(x)/mean(x))
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
# Load data and change time to numeric
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/batch_combo.csv")
# dat <- cbind(dat1,dat2)
# anc <-read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/ancestor.csv")
# anc$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", anc$Time))
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230802_GrowthCurve_SporeMut.csv")
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat.raw$Time))
dat$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat$Time))
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("A_"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("ancestor_"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("ancestor"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
anc.fits.out <- read.table("../output/anc_new.fit.parms.txt", sep = ",", header = TRUE)
M4 <- dat %>%
select(Time, starts_with("M4_"))
M4.fits <-growth.modGomp(input = S1, output.name = "M4_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M4 <- dat %>%
select(Time, starts_with("M4_"))
M4.fits <-growth.modGomp(input = M4, output.name = "M4_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M4.fits.out <- read.table("../output/M4_new.fit.parms.txt", sep = ",", header = TRUE)
rm(list=ls())
#setwd("~/Github/SporeMut/code/4.GrowthCurves/test")
setwd("~/Github/SporMut/code/4.GrowthCurves/test")
require("png")
require("dplyr")
require("grid")
require("gtools")
require("nlme")
require("MuMIn")
require("bbmle")
#source("~/Github/SporeMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
source("~/Github/SporMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) 100*( sd(x)/mean(x))
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
# Load data and change time to numeric
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/batch_combo.csv")
# dat <- cbind(dat1,dat2)
# anc <-read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/ancestor.csv")
# anc$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", anc$Time))
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230802_GrowthCurve_SporeMut.csv")
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
# Load data and change time to numeric
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/batch_combo.csv")
# dat <- cbind(dat1,dat2)
# anc <-read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/ancestor.csv")
# anc$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", anc$Time))
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230802_GrowthCurve_SporeMut.csv")
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
rm(list=ls())
#setwd("~/Github/SporeMut/code/4.GrowthCurves/test")
setwd("~/Github/SporMut/code/4.GrowthCurves/test")
# Load data and change time to numeric
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/batch_combo.csv")
# dat <- cbind(dat1,dat2)
# anc <-read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/ancestor.csv")
# anc$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", anc$Time))
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230802_GrowthCurve_SporeMut.csv")
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
# Load data and change time to numeric
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/batch_combo.csv")
# dat <- cbind(dat1,dat2)
# anc <-read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/ancestor.csv")
# anc$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", anc$Time))
# dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230802_GrowthCurve_SporeMut.csv")
#dat <- read.csv("~/Github/SporeMut/code/4.GrowthCurves/data/20230821_GrowthCurve_SporeMut.csv")
dat <- read.csv("~/Github/SporMut/code/4.GrowthCurves/data/20230821_GrowthCurves_SporeMut.csv")
dat$Time <- as.numeric(sub("^(\\d+):(\\d+).*", "\\1.\\2", dat$Time))
# filter so length of data is equal across strains
#dat <- dat.raw %>%
# filter(row_number() <= 93)
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("ancestor"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
require("png")
require("dplyr")
require("grid")
require("gtools")
require("nlme")
require("MuMIn")
require("bbmle")
#source("~/Github/SporeMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
source("~/Github/SporMut/code/4.GrowthCurves/bin/modified_Gomp_diagnostic3.R")
sem <- function(x) sqrt(var(x)/length(x))
cv <- function(x) 100*( sd(x)/mean(x))
LL.95 <- function(x) t.test(x)$conf.int[1]
UL.95 <- function(x) t.test(x)$conf.int[2]
# Slow process: comment out line below after running
# Here, read in each strain one-at-a-time (helps with troubleshooting fits)
anc <- dat %>%
select(Time, starts_with("ancestor"))
anc.fits <-growth.modGomp(input = anc, output.name = "anc_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
anc.fits.out <- read.table("../output/anc_new.fit.parms.txt", sep = ",", header = TRUE)
M4 <- dat %>%
select(Time, starts_with("M4_"))
M4.fits <-growth.modGomp(input = M4, output.name = "M4_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M4.fits.out <- read.table("../output/M4_new.fit.parms.txt", sep = ",", header = TRUE)
S1 <- dat %>%
select(Time, starts_with("S1_"))
S1.fits <-growth.modGomp(input = S1, output.name = "S1_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
S1.fits.out <- read.table("../output/S1_new.fit.parms.txt", sep = ",", header = TRUE)
M23 <- dat %>%
select(Time, starts_with("S1_"))
M23.fits <-growth.modGomp(input = M23, output.name = "M23_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M23.fits.out <- read.table("../output/S6_new.fit.parms.txt", sep = ",", header = TRUE)
M23.fits.out <- read.table("../output/M23_new.fit.parms.txt", sep = ",", header = TRUE)
M23 <- dat %>%
select(Time, starts_with("M23_"))
M23.fits <-growth.modGomp(input = M23, output.name = "M23_new.fit.parms",
synergy = F, temp = F, smooth = T, trim = T)
M23.fits.out <- read.table("../output/M23_new.fit.parms.txt", sep = ",", header = TRUE)
7930494513/2.6e10
3.5e8/2.6e10
round(7930494513/2.6e10, 2)
round(3.5e8/2.6e10, 2)
round(1483262323/2.6e10, 2)
round(6447232190/2.6e10, 2)
122506766+5088398221+87154355
#opportunity: 5090711221
#direct: 1236881490
#total: 5090711221
5090711221+1236881490
6327592711/(122506766+6327592711+87154355)*100
122506766/(122506766+6327592711+87154355)*100
87154355/(122506766+6327592711+87154355)*100
