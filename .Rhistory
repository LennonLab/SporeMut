pop_dyn
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = l + (u - l) / (1 - exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = l + (u - l) / (1 + exp(r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = predict(fit.v2, data.all), time=data.all$time)
predicted_v2
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = exp(l + (u - l))/ (1 + exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = l + (u - l)/ (1 + exp(-r*(m - time))), sd = z), start = list(l = L2, u = U2, m = M, r = R, z = Z), data = data.all)
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = predict(fit.v2, data.all), time=data.all$time)
predicted_v2
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = l + (u - l)/ (1 + exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = 0.7, r = R, z = Z), data = data.all)
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = predict(fit.v2, data.all), time=data.all$time)
predicted_v2
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = predict(fit.v2, data.all), time=data.all$time)
pop_dyn <- ggplot(data.all, aes(x = time, y = spore))+
geom_point(aes(color = "grey25"), alpha = 0.4, size = 3)+
geom_point(aes(x = time, y = veg, color = "grey75"), size = 3, alpha = 0.4)+
geom_line(data = predicted_v2, aes(y=curve, x = time), color = "grey15", linewidth = 1, linetype = "dashed")+
geom_line(data = predicted_s2, aes(y=curve, x = time), color = "grey85", linewidth = 1, linetype = "dashed")+
mytheme+
scale_x_continuous(sec.axis=dup_axis(), trans="log10",oob = scales::squish_infinite)+
labs(y = expression(paste("Bacteria (CFU ml"^-1,")")), x = "Time (d)")+
scale_y_log10(limits = c(10^4.5, 10^8.5),labels = label_log(), sec.axis=dup_axis())+
scale_color_identity(guide = "legend",
breaks = c("grey25", "grey75"),
labels = c("Spore", "Non-spore"))+
theme(legend.position = c(.8,.8))
pop_dyn
predicted_v2
pop_dyn <- ggplot(data.all, aes(x = time, y = spore))+
geom_point(aes(color = "grey25"), alpha = 0.4, size = 3)+
geom_point(aes(x = time, y = veg, color = "grey75"), size = 3, alpha = 0.4)+
geom_line(data = predicted_v2, aes(y=curve, x = time), color = "grey15", linewidth = 1, linetype = "dashed")+
geom_line(data = predicted_s2, aes(y=curve, x = time), color = "grey85", linewidth = 1, linetype = "dashed")+
mytheme+
scale_x_continuous(sec.axis=dup_axis(), trans="log10",oob = scales::squish_infinite)+
labs(y = expression(paste("Bacteria (CFU ml"^-1,")")), x = "Time (d)")+
#scale_y_log10(limits = c(10^4.5, 10^8.5),labels = label_log(), sec.axis=dup_axis())+
scale_color_identity(guide = "legend",
breaks = c("grey25", "grey75"),
labels = c("Spore", "Non-spore"))+
theme(legend.position = c(.8,.8))
pop_dyn
pop_dyn <- ggplot(data.all, aes(x = time, y = spore))+
geom_point(aes(color = "grey25"), alpha = 0.4, size = 3)+
geom_point(aes(x = time, y = veg, color = "grey75"), size = 3, alpha = 0.4)+
geom_line(data = predicted_v2, aes(y=curve, x = time), color = "grey15", linewidth = 1, linetype = "dashed")+
geom_line(data = predicted_s2, aes(y=curve, x = time), color = "grey85", linewidth = 1, linetype = "dashed")+
mytheme+
scale_x_continuous(sec.axis=dup_axis(), trans="log10",oob = scales::squish_infinite)+
labs(y = expression(paste("Bacteria (CFU ml"^-1,")")), x = "Time (d)")+
scale_y_log10(limits = c(10^3.5, 10^8.5),labels = label_log(), sec.axis=dup_axis())+
scale_color_identity(guide = "legend",
breaks = c("grey25", "grey75"),
labels = c("Spore", "Non-spore"))+
theme(legend.position = c(.8,.8))
pop_dyn
fit.s2 <- mle2(log10(spore) ~ dnorm(mean = l + (u - l) / (1 + exp(-r*(m - time))), sd = z),
start = list(l = L2, u = U2, m = M, r = R, z = Z), data = data.all)
predicted_s2 <- data.frame(curve = 10^predict(fit.s2, data.all), time=data.all$time)
predicted_s2
pop_dyn <- ggplot(data.all, aes(x = time, y = spore))+
geom_point(aes(color = "grey25"), alpha = 0.4, size = 3)+
geom_point(aes(x = time, y = veg, color = "grey75"), size = 3, alpha = 0.4)+
geom_line(data = predicted_v2, aes(y=curve, x = time), color = "grey15", linewidth = 1, linetype = "dashed")+
geom_line(data = predicted_s2, aes(y=curve, x = time), color = "grey85", linewidth = 1, linetype = "dashed")+
mytheme+
scale_x_continuous(sec.axis=dup_axis(), trans="log10",oob = scales::squish_infinite)+
labs(y = expression(paste("Bacteria (CFU ml"^-1,")")), x = "Time (d)")+
scale_y_log10(limits = c(10^4.5, 10^8.5),labels = label_log(), sec.axis=dup_axis())+
scale_color_identity(guide = "legend",
breaks = c("grey25", "grey75"),
labels = c("Spore", "Non-spore"))+
theme(legend.position = c(.8,.8))
pop_dyn
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = 10^predict(fit.v2, data.all), time=data.all$time)
pop_dyn <- ggplot(data.all, aes(x = time, y = spore))+
geom_point(aes(color = "grey25"), alpha = 0.4, size = 3)+
geom_point(aes(x = time, y = veg, color = "grey75"), size = 3, alpha = 0.4)+
geom_line(data = predicted_v2, aes(y=curve, x = time), color = "grey15", linewidth = 1, linetype = "dashed")+
geom_line(data = predicted_s2, aes(y=curve, x = time), color = "grey85", linewidth = 1, linetype = "dashed")+
mytheme+
scale_x_continuous(sec.axis=dup_axis(), trans="log10",oob = scales::squish_infinite)+
labs(y = expression(paste("Bacteria (CFU ml"^-1,")")), x = "Time (d)")+
scale_y_log10(limits = c(10^4.5, 10^8.5),labels = label_log(), sec.axis=dup_axis())+
scale_color_identity(guide = "legend",
breaks = c("grey25", "grey75"),
labels = c("Spore", "Non-spore"))+
theme(legend.position = c(.8,.8))
pop_dyn
ggsave("populationDynamics_newMod.pdf", pop_dyn, height = 4, width = 5)
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = exp(l + (u - l)) / (1 + exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = exp(l + (u - l) / (1 + exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = exp((l + (u - l)) / (1 + exp(-r*(m - time)))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = 10^predict(fit.v2, data.all), time=data.all$time)
predicted_v2
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = l + (u - l) / (1 + exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
L = 5.5 # Minimum (log10)
U = 7.9 # Maximum (log10)
M = 2 # Midpoint
R = 0.16 # Slope
Z = 0.2 # Error
L2 = 6# Minimum (log10)
U2 = 6# Minimum (log10)
fit.v2 <- mle2(log10(veg) ~ dnorm(mean = l + (u - l) / (1 + exp(-r*(m - time))), sd = z), start = list(l = L, u = U, m = M, r = R, z = Z), data = data.all)
fit.s2 <- mle2(log10(spore) ~ dnorm(mean = l + (u - l) / (1 + exp(-r*(m - time))), sd = z),
start = list(l = L2, u = U2, m = M, r = R, z = Z), data = data.all)
# predict new data to plot the curves
predicted_v2 <- data.frame(curve = 10^predict(fit.v2, data.all), time=data.all$time)
predicted_s2 <- data.frame(curve = 10^predict(fit.s2, data.all), time=data.all$time)
predicted_v2
pop_dyn <- ggplot(data.all, aes(x = time, y = spore))+
geom_point(aes(color = "grey25"), alpha = 0.4, size = 3)+
geom_point(aes(x = time, y = veg, color = "grey75"), size = 3, alpha = 0.4)+
geom_line(data = predicted_v2, aes(y=curve, x = time), color = "grey15", linewidth = 1, linetype = "dashed")+
geom_line(data = predicted_s2, aes(y=curve, x = time), color = "grey85", linewidth = 1, linetype = "dashed")+
mytheme+
scale_x_continuous(sec.axis=dup_axis(), trans="log10",oob = scales::squish_infinite)+
labs(y = expression(paste("Bacteria (CFU ml"^-1,")")), x = "Time (d)")+
scale_y_log10(limits = c(10^4.5, 10^8.5),labels = label_log(), sec.axis=dup_axis())+
scale_color_identity(guide = "legend",
breaks = c("grey25", "grey75"),
labels = c("Spore", "Non-spore"))+
theme(legend.position = c(.8,.8))
pop_dyn
# Set working directory and load packages
rm(list = ls())
getwd()
setwd("~/Github/SporMut/code/3.Biofilm")
require("ggplot2")
require("cowplot")
require("reshape2")
require("ggpubr")
require("dplyr")
require("scales")
require("grid")
require("png")
require("rstan")
require("devtools")
#install_github("paul-buerkner/brms")
library(brms)
library(bayestestR)
library(bayesplot)
sem <- function(x, ...){sd(x, na.rm = TRUE)/sqrt(length(na.omit(x)))}
#For jags bayesian - Don
library(rjags)
library(ggridges) # ridge plots
# Jay's theme
mytheme <- theme_bw()+
theme(axis.ticks.length = unit(.25, "cm"))+
theme(legend.text = element_text(size=12))+
theme(axis.text = element_text(size = 14), axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_rect(fill=NA, colour = "black",
size=1))+
theme(strip.text.x = element_text(size = 14))+
theme(legend.title=element_blank())+
theme(panel.border = element_rect(fill=NA, colour = "black",
size=1)) +
theme(axis.text.x.top = element_blank(), axis.title.x.top = element_blank(),
axis.text.y.right = element_blank(), axis.title.y.right = element_blank())+
theme(axis.title.x = element_text(margin=margin(10,0,0)),
axis.title.y = element_text(margin=margin(0,10,0,0)),
axis.text.x = element_text(margin=margin(10,0,0,0)),
axis.text.y = element_text(margin=margin(0,10,0,0)))
#load data
input_dat <- read.table("~/GitHub/SporMut/code/3.Biofilm/biofil.csv", sep= ",", header = T)
#grab the clone names
clns<-c("m4","m13","m17","m19","m21","m23","m26","m41","m54","m79","ancestor")
ord_list<-rep(clns,each=8)
#put this is form this code used previously
dat<-split(input_dat,f=factor(ord_list,levels = clns))
#set up data for analyses
#var.mat<-data.frame(sapply(dat,"[",8))^2
#make weights based on inverse variance within clones
#wts_mat<-sweep(1/var.mat,MARGIN = 2,STATS =colSums(1/var.mat) ,FUN = "/")
#find weighted means
#apply(as.data.frame(sapply(dat,"[",8))*as.matrix(wts_mat),2,sum)
#create a long-form data.frame for later use
biofilm_df<-data.frame(biofilm=stack(as.data.frame(sapply(dat,"[",8)))$values,                           lvl=as.factor(sapply(strsplit(as.character(stack(as.data.frame(sapply(dat,"[",8)))$ind),"\\."),"[",1)))
# now let's do it bayes-style. from what I gather from the code, the sampling is simply done using the 6
# replicates for each clone and the ancestor. So, I will do that I will assume that the umax for each rep (for each clone)
# is sampling a population mean. in addition, will use the umax_se to define weights
#make a jags model that estimates a umax for the replicates of clones and the ancestor,
# using the weights the estimates. we will sample a log-normal dist for umax to make
# sure the estimates are all positive during sampling and assume each clone is sampling a dist
# with unique variance
mod<-"model{
for(i in 1:8){
for(j in 1:10){
#here is the model for each clone
M_mu[i,j]~dlnorm(mu_m[j],tau_m[j])
#M_mu[i,j]~dlnorm(mu_m[j],tau_m[j])
}
#here is the model of the ancestor
An_mu[i]~dlnorm(mu_a,tau_a)
#An_mu[i]~dlnorm(mu_a,tau_a)
}
#priors
for(i in 1:10){
mu_m[i]~dnorm(0,.001)
tau_m[i]~dgamma(.01,.01)
}
mu_a~dnorm(0,.001)
tau_a~dgamma(.01,.01)
}"
#Fit it
#gather data to feed jags
jdat<-list("M_mu"=as.data.frame(sapply(dat,"[",8))[,-11],"An_mu"=dat[['ancestor']]$OD550_Corrected)
#build the model object
jmod<-jags.model(textConnection(mod),n.chains = 4,data = jdat,n.adapt = 1000)
#update it
update(jmod,1000)
#sample it
ans<-coda.samples(jmod,c("mu_m","mu_a"),10000)
#look at plot to make sure they converge
#plot(ans)
#the samples look great so sets peek at the summaries of the posterior dists
summ<-summary(ans)
#check out the median of the posterior estimates
# we exponentiate them because we used a log-normal
exp(summ$quantiles)
exp(summ$quantiles[,"50%"])
#lets compare these medians with the simple weighted means
apply(as.data.frame(sapply(dat,"[",8)),2,sum)
#nice. all makes sense and is working
##Let's calculate the relative fitness across all chains
#combine all of the chains
vals<-rbind(as.matrix(ans[[1]]),as.matrix(ans[[2]]),as.matrix(ans[[3]]),as.matrix(ans[[4]]))
#find the quartiles of the relative fitness
apply(vals,2,function(x)median(exp(x)))
#calc relative fitness for rest of clones and plot them in a style
#similar to umax
plt_qnts<-matrix(0,10,3)
rownames(plt_qnts)<-clns[-11]
colnames(plt_qnts)<-c("2.5%","50%","97.5%")
for(i in 1:10)plt_qnts[i,]<-quantile(exp(vals[,i+1])/exp(vals[,1]),c(.025,.5,.975))
#plot the results
plt_qnts_dat <- as.data.frame(plt_qnts)
plt_qnts_dat$clones <- rownames(plt_qnts_dat)
plt_qnts_dat$clones <- factor(plt_qnts_dat$clones, c("m4", "m13", "m79", "m17", "m19", "m21", "m41", "m54", "m23", "m26"))
biofilmplot <- ggplot(plt_qnts_dat, aes(y = clones, x = log10(plt_qnts_dat[,2]), group = clones))+
geom_vline(xintercept = 0, linetype = "dashed")+
geom_point(size = 4, shape = 21, color = "darkblue", fill = "white")+
geom_errorbar(aes(xmin =log10(plt_qnts_dat[,1]), xmax =log10(plt_qnts_dat[,3])), width = 0, linewidth =1, color = "darkblue")+
mytheme+
xlab("Relative biofilm")+
theme(axis.title.y = element_blank())
ggsave("biofilmJags_relative.pdf", biofilmplot, width = 5, height = 6)
#plot as distribution
data_df <- as.data.frame(exp(vals))
data_df_rel <- log10(data_df[,2:11]/data_df[,1])
names(data_df_rel) <- clns[-11]
data_long <- data_df_rel %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")
data_long$clones <- factor(data_long$clones, c("m4", "m13", "m79", "m17", "m19", "m21", "m41", "m54", "m23", "m26"))
clone <- levels(data_long$clones)
clones <- c("m4", "m13", "m79", "m17", "m19", "m21", "m41", "m54", "m23", "m26")
dist.bio.rel <- ggplot(data_long, aes(y = as.numeric(clones), x = dists, group = clones,
fill = 0.5 - abs(0.5 - stat(ecdf))))+
geom_vline(xintercept = 0, linetype = "dashed", color = "grey25")+
stat_density_ridges(geom = "density_ridges_gradient", calc_ecdf = TRUE,
rel_min_height = 0.005, alpha = 0.5, scale = 2, color = "grey25" )+
xlab(expression(paste("Relative biofilm, ", italic(log[10]), sep="")))+
scale_x_continuous(limits = c(-1.5, 1.5), sec.axis=dup_axis())+
mytheme+
theme(legend.position = c(.85,.8))+
scale_fill_gradient(low = "white", high = "grey50",
name = "Tail prob.")+
theme(axis.title.y = element_blank())+
scale_y_continuous(breaks = 1:length(clone),
labels = clones,
sec.axis = sec_axis(~.,
breaks = 1:length(clone),
labels = clones))
ggsave("biofilm_jags_dist_log.pdf", dist.bio.rel, width = 5, height = 5)
plt_qnts_dat
data_df
data_long
data_long
data_df_rel
data_long
data_df_rel <- data_df[,2:11]/data_df[,1]
data_df_rel2 <- data_df[,2:11]/data_df[,1]
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")
data_df_rel2
names(data_df_rel2) <- clns[-11]
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")
data_long2
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(y = list(quibble(y, c(0.25, 0.50, 0.75)))) %>%
tidyr::unnest(y)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(y = list(tidyr::quibble(y, c(0.25, 0.50, 0.75)))) %>%
tidyr::unnest(y)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(y = list(dplyr::quibble(y, c(0.25, 0.50, 0.75)))) %>%
tidyr::unnest(y)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(x = quantile(x, c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75))
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(dists = quantile(x, c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75))
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(x = quantile(dist, c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75))
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(x = quantile(dist, c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75). na.rm =T)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(x = quantile(dist, c(0.25, 0.5, 0.75)), q = c(0.25, 0.5, 0.75), na.rm =T)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(quants = quantile(dist, probs = c(0.25, 0.50, 0.95)))
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(
Q1 = quantile(values, 0.25),
Median = quantile(values, 0.5),
Q3 = quantile(values, 0.95)
)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(
Q1 = quantile(dist, 0.25),
Median = quantile(dist, 0.5),
Q3 = quantile(dist, 0.95)
)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(
Q1 = quantile(dist, 0.25, na.rm = T),
Median = quantile(dist, 0.5, na.rm = T),
Q3 = quantile(dist, 0.95, na.rm = T)
)
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")
data_long2
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_long2
data_df_rel3 <- data_long2 %>%
mutate(mutation = c('ywc', 'sin', 'sin', 'sin', 'spore', 'spore',
'ywc', 'sin', 'sin', 'ywc')) %>%
group_by(mutation) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_long2
data_df_rel3 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists") %>%
mutate(mutation = c('ywc', 'sin', 'sin', 'sin', 'spore', 'spore',
'ywc', 'sin', 'sin', 'ywc')) %>%
group_by(mutation) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
rlang::last_trace()
data_df_rel3 <- data_long2 %>%
mutate(mutation = c('ywc', 'sin', 'sin', 'sin', 'spore', 'spore',
'ywc', 'sin', 'sin', 'ywc')) %>%
group_by(mutation) %>%
summarise(
Q1 = mean(Q1),
Median = mean(Median),
Q3 = mean(Q3)
)
data_df_rel3
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")
data_df
clns
data_df$clones <-  c("ancestor", "m4", "m13", "m79", "m17", "m19", "m21", "m41", "m54", "m23", "m26")
names(data_df) <-  c("ancestor", "m4", "m13", "m79", "m17", "m19", "m21", "m41", "m54", "m23", "m26")
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")
data_long_abs
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = ancestor:m26, names_to = "clones", values_to = "dists")
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = ancestor:m26, names_to = "clones", values_to = "dists") %>%
group_by(clones) %>%
summarise(
Q1 = mean(Q1),
Median = mean(Median),
Q3 = mean(Q3)
)
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = ancestor:m26, names_to = "clones", values_to = "dists") %>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_long_abs
data_df
clns
names(data_df) <-  c("ancestor", "m4", "m13", "m17", "m19", "m21", "m23", "m26", "m41", "m54", "m79")
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = m4:ancestor, names_to = "clones", values_to = "dists") %>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_long_abs
data_df
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists") %>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_long_abs
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = ancestor:m79, names_to = "clones", values_to = "dists") %>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_long_abs
data_long_abs <- data_df %>%
tidyr::pivot_longer(cols = ancestor:m79, names_to = "clones", values_to = "dists") %>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.975, na.rm = T)
)
data_long_abs
data_df_rel2 <- data_df[,2:11]/data_df[,1]
names(data_df_rel2) <- clns[-11]
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.95, na.rm = T)
)
data_df_rel3 <- data_long2 %>%
mutate(mutation = c('ywc', 'sin', 'sin', 'sin', 'spore', 'spore',
'ywc', 'sin', 'sin', 'ywc')) %>%
group_by(mutation) %>%
summarise(
Q1 = mean(Q1),
Median = mean(Median),
Q3 = mean(Q3)
)
data_df_rel3
data_df_rel3
data_long2
data_long2 <- data_df_rel2 %>%
tidyr::pivot_longer(cols = m4:m79, names_to = "clones", values_to = "dists")%>%
group_by(clones) %>%
summarise(
Q1 = quantile(dists, 0.25, na.rm = T),
Median = quantile(dists, 0.5, na.rm = T),
Q3 = quantile(dists, 0.975, na.rm = T)
)
data_long2
data_df_rel3 <- data_long2 %>%
mutate(mutation = c('ywc', 'sin', 'sin', 'sin', 'spore', 'spore',
'ywc', 'sin', 'sin', 'ywc')) %>%
group_by(mutation) %>%
summarise(
Q1 = mean(Q1),
Median = mean(Median),
Q3 = mean(Q3)
)
data_df_rel3
